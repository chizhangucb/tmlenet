% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/Define_sVar_class.R
\name{def.sW}
\alias{+.DefineSummariesClass}
\alias{def.sA}
\alias{def.sW}
\title{Define Summary Measures sA and sW}
\usage{
def.sW(...)

def.sA(...)

\method{+}{DefineSummariesClass}(sVar1, sVar2)
}
\arguments{
\item{...}{Named R expressions or character strings that specify the formula for creating the summary measures.}

\item{sVar1}{An object returned by a call to \code{def.sW} or \code{def.sA} functions.}

\item{sVar2}{An object returned by a call to \code{def.sW} or \code{def.sA} functions.}
}
\value{
R6 object of class \code{Define_sVar} which must be passed as argument to \code{\link{tmlenet}}.
}
\description{
Define and store \code{tmlenet} function arguments \code{sW} and \code{sA},
 which are arbitrary summary measures based on treatmet \code{Anode} and baseline covariates in \code{Wnodes}
 constructed from the input \code{data}.
 Each summary measure \code{sVar} is specified as a named R expression or a named character argument.
 Separate calls to \code{def.sW/def.sA} functions can be aggregated into a single collection with '+' function,
 e.g., \code{def.sW(W1=W1)+def.sW(W2=W2)}.
 Two special named arguments can be passed to the \code{def.sW}, \code{def.sA} functions:
 \itemize{
 \item \code{noname = TRUE} - to not use the summary measure name provided by the user when assigning
   the names to the summary measure columns (variables); and
 \item \code{replaceNAw0 = TRUE} - To automatically replace all the missing network covariate values (\code{NA}s) with \code{0}.
}
}
\section{Details}{

The R expressions passed to these functions are evaluated later inside \code{\link{tmlenet}} or \code{\link{eval.summaries}} functions,
using the environment of the input data frame and enclosed within the user-calling environment.
}
\examples{
#***************************************************************************************
# Examples of summary measures defined by def.sW
#***************************************************************************************
# Use R expressions to define summary measure functions, s.a.,
# W2[[0]] just means W2; W2[[1:Kmax]] means vectors of (W2_netF_j), j=1, ..., Kmax;
def_sW <- def.sW(netW1 = W1[[0:Kmax]], noname = TRUE) +
          def.sW(netW2 = W2[[1:Kmax]], noname = TRUE) +
          def.sW(netW3 = W3[[1:Kmax]], noname = TRUE) +
          def.sW(netW3_sum = rowSums(W3[[1:Kmax]]), replaceNAw0 = TRUE)

def_sW <- def.sW(netW2 = W2[[1:Kmax]]) +
            def.sW(netW3_sum = rowSums(W3[[1:Kmax]]), replaceNAw0 = TRUE)

def_sW <- def.sW(netW2 = W2[[1:Kmax]], netW3_sum = rowSums(W3[[1:Kmax]]), noname= TRUE,
                  replaceNAw0 = TRUE)
def_sW <- def.sW(netW2 = W2[[1:Kmax]], netW3_sum = rowSums(W3[[1:Kmax]]),
                  replaceNAw0 = FALSE, noname = TRUE)

def_sW <- def.sW(W1 = W1[[0]], W1 = W2[[0:Kmax]], W1 = W3[[0:Kmax]],
                  netW1_sum = rowSums(W1[[1:Kmax]]),
                  netW2_sum = rowSums(W2[[1:Kmax]]),
                  netW3_sum = rowSums(W3[[1:Kmax]]))

#***************************************************************************************
# Examples of summary measures defined by def.sA
#***************************************************************************************
def_sA <- def.sA(sum_1mAW2_nets = rowSums((1-A[[1:Kmax]]) * W2[[1:Kmax]]),
            replaceNAw0 = TRUE) +
            def.sA(netA = A[[0:Kmax]])

#***************************************************************************************
# Example. Three equivalent ways to define summary measures:
#***************************************************************************************
def_sW <- def.sW(W1 = W1[[0]], W2 = W2[[0]], W3 = W3[[0]])
def_sW <- def.sW(W1 = W1, W2 = W2, W3 = W3) # vs 2
def_sW <- def.sW(W1 = "W1[[0]]", W2 = "W2[[0]]", W3 = "W3[[0]]") # vs 3

#***************************************************************************************
# Example. See contents of the Define_sVar object returned by def.sW
#***************************************************************************************
def_sW$sVar.exprs
def_sW$sVar.expr.names
def_sW$ReplMisVal0
def_sW$sVar.misXreplace
def_sW$sVar.noname

#***************************************************************************************
# Example. More summary measures for sA
#***************************************************************************************
def_sA <- def.sA(netA = A[[0:Kmax]], noname = TRUE)
def_sA <- def.sA(netA = "A[[0:Kmax]]",
                sum_1mAW2_nets = rowSums((1-A[[1:Kmax]]) * W2[[1:Kmax]]))

#***************************************************************************************
# Example. More summary measures for sW and sA
#***************************************************************************************
def_sW <- def.sW(netW2 = W2[[1:Kmax]], noname = TRUE) + 
          def.sW(netW3_sum = rowSums(W3[[1:Kmax]]), replaceNAw0 = TRUE)
            
def_sA <- def.sA(sum_1mAW2_nets = rowSums((1-A[[1:Kmax]]) * W2[[1:Kmax]]),
            replaceNAw0 = TRUE) +
          def.sA(netA = A[[0:Kmax]], noname = TRUE)

#***************************************************************************************
# Evaluate the summary measures applied to the  (O)bserved data (data.frame) and network
#***************************************************************************************
data(df_netKmax6) # load observed data
data(NetInd_mat_Kmax6)  # load the network ID matrix
res <- eval.summaries(sW = def_sW, sA = def_sA,  Kmax = 6, data = df_netKmax6,
  NETIDmat = NetInd_mat_Kmax6, verbose = TRUE)

#***************************************************************************************
# Contents of the list returned by eval.summaries():
#***************************************************************************************
names(res)
# matrix of sW summary measures:
res$sW.matrix
# matrix of sA summary measures:
res$sA.matrix
# matrix of network IDs:
res$NETIDmat
# Observed data (sW,sA) stored as "DatNet.sWsA" R6 class object:
res$DatNet.ObsP0
class(res$DatNet.ObsP0)




#***************************************************************************************
# Testing new parser Define_sVar_tmlenet:
#***************************************************************************************
data(df_netKmax6) # load observed data
head(df_netKmax6)
data(NetInd_mat_Kmax6)  # load the network ID matrix
netind_cl <- simcausal:::NetIndClass$new(nobs = nrow(df_netKmax6), Kmax = 6)
netind_cl$NetInd <- NetInd_mat_Kmax6
netind_cl$nF

eval_exprs <- function(sVar_expr, data.df, netind_cl) {
  mat <- sVar_expr$eval.nodeforms(data.df = data.df, netind_cl = netind_cl)
  return(mat)
}

# --------------------------------------------------------------------------------------
# test 1 (simple vars, no names):
# --------------------------------------------------------------------------------------
# as expressions:
def_sW <- def.sW(W1,W2,W3)
mat1 <- eval_exprs(def_sW, df_netKmax6, netind_cl)
def_sW$sVar.names.map
mat1b <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl)
def_sW$sVar.names.map
head(mat1)
head(mat1b)
all.equal(mat1, mat1b)
all.equal(mat1[,"W1"], df_netKmax6[,"W1"])
all.equal(mat1[,"W2"], df_netKmax6[,"W2"])
all.equal(mat1[,"W3"], df_netKmax6[,"W3"])
all.equal(mat1[,"nF"], netind_cl$nF)

def_sW <- def.sW(W1[[0]],W2,W3)
mat2 <- eval_exprs(def_sW, df_netKmax6, netind_cl)
def_sW$sVar.names.map
mat2b <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl)
def_sW$sVar.names.map
head(mat2)
head(mat2b)
all.equal(mat2, mat2b)
all.equal(mat1, mat2)

# as character strings:
def_sW <- def.sW("W1","W2","W3")
mat2 <- eval_exprs(def_sW, df_netKmax6, netind_cl)
def_sW$sVar.names.map
mat2b <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl)
def_sW$sVar.names.map
head(mat2)
head(mat2b)
all.equal(mat2, mat2b)
all.equal(mat1, mat2)

def_sW <- def.sW("W1[[0]]","W2","W3")
mat2 <- eval_exprs(def_sW, df_netKmax6, netind_cl)
def_sW$sVar.names.map
mat2b <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl)
def_sW$sVar.names.map
head(mat2)
head(mat2b)
all.equal(mat2, mat2b)
all.equal(mat1, mat2)

# --------------------------------------------------------------------------------------
# test 2 (two expressions):
# --------------------------------------------------------------------------------------
def_sW <- def.sW(netW2 = W2[[0:Kmax]], W2 = "W2", W3 = W3[[0]])
def_sW$exprs_list
def_sW$asis.flags
def_sW$sVar.misXreplace
def_sW$sVar.noname
def_sW$sVar.expr.names

mat1 <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
(map1 <- def_sW$sVar.names.map)
head(mat1)
colnames(mat1)
mat2 <- def_sW$eval.nodeforms(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
(map2 <- def_sW$sVar.names.map)
head(mat2)
colnames(mat2)
all.equal(mat1, mat2)
all.equal(map1, map2)

# --------------------------------------------------------------------------------------
# test 3 (simple expressions, noname = FALSE):
# --------------------------------------------------------------------------------------
def_sW <- def.sW(netW2 = W2[[1:Kmax]], W2 = W2)
def_sW$exprs_list
def_sW$asis.flags
def_sW$sVar.misXreplace
def_sW$sVar.noname
def_sW$sVar.expr.names

mat1 <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
(map1 <- def_sW$sVar.names.map)
head(mat1)
colnames(mat1)
mat2 <- def_sW$eval.nodeforms(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
(map2 <- def_sW$sVar.names.map)
head(mat2)
colnames(mat2)
all.equal(mat1, mat2)
all.equal(map1, map2)

# --------------------------------------------------------------------------------------
# test 1 (just one expression, noname):
# both return the same results
# --------------------------------------------------------------------------------------
def_sW <- def.sW(netW2 = W2[[1:Kmax]], noname = TRUE)
def_sW$exprs_list
def_sW$asis.flags
def_sW$sVar.misXreplace
def_sW$sVar.noname
def_sW$sVar.expr.names

mat1 <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
head(mat1)
colnames(mat1)
mat2 <- def_sW$eval.nodeforms(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
head(mat2)
colnames(mat2)
all.equal(mat1, mat2)



# --------------------------------------------------------------------------------------
# test 3 (complex expression, noname = FALSE):
# todo: should give an error for using A variable in def.sW
# --------------------------------------------------------------------------------------
# def_sW <- def.sW(netW2 = W2[[1:Kmax]], W2 = W2)
def_sW <- def.sW(sum_1mAW2_nets = rowSums((1-A[[1:Kmax]]) * W2[[1:Kmax]]), replaceNAw0 = TRUE)
def_sW$exprs_list
def_sW$asis.flags
def_sW$sVar.misXreplace
def_sW$sVar.noname
def_sW$sVar.expr.names

# version 1 using the simcausal evaluator:
mat1 <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
map1 <- def_sW$sVar.names.map
head(mat1)
colnames(mat1)
mat2a <- def_sW$eval.nodeforms(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
map2a <- def_sW$sVar.names.map
head(mat2a)
colnames(mat2a)
all.equal(mat1, mat2a)
all.equal(map1, map2a)

# version 2 using the simcausal evaluator:
def_sW <- def.sW(sum_1mAW2_nets = sum((1-A[[1:Kmax]]) * W2[[1:Kmax]]), replaceNAw0 = TRUE)
def_sW$exprs_list
def_sW$asis.flags
def_sW$sVar.misXreplace
def_sW$sVar.noname
def_sW$sVar.expr.names
mat2b <- def_sW$eval.nodeforms(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
map2b <- def_sW$sVar.names.map
head(mat2b)
colnames(mat2b)
all.equal(mat1, mat2b)
all.equal(map1, map2b)




# --------------------------------------------------------------------------------------
# test 4 (simple unnamed expression)
# --------------------------------------------------------------------------------------
def_sW <- def.sW(netW2 = W2[[1:Kmax]], W2)
def_sW$exprs_list
def_sW$asis.flags
def_sW$sVar.misXreplace
def_sW$sVar.noname
def_sW$sVar.expr.names

mat1 <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
(map1 <- def_sW$sVar.names.map)
head(mat1)
colnames(mat1)

mat2 <- def_sW$eval.nodeforms(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
map2 <- def_sW$sVar.names.map
head(mat2)
colnames(mat2)
map2


def_sW <- def.sW(netW2 = W2[[1:Kmax]], W1[[0]]*W2[[0]])
def_sW <- def.sW(W2[[1:Kmax]], W1[[0]]*W2[[0]])
mat1 <- def_sW$get.mat.sVar(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
head(mat1)
names(mat1)
map1 <- def_sW$sVar.names.map
names(map1)
mat2 <- def_sW$eval.nodeforms(data.df = df_netKmax6, netind_cl = netind_cl, addnFnode = "nF")
map2 <- def_sW$sVar.names.map
head(mat2)
colnames(mat2)
map2














}
\seealso{
\code{\link{eval.summaries}} for
 evaluation and validation of the summary measures,
 \code{\link{tmlenet}} for estimation.
}

